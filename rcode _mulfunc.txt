
library(dplyr)
library(ggplot2)
library(patchwork)


##### Denote function ####
Qfunc = function(beta = 1 ,lambda,latentZ_mat, j=1){
  sum(latentZ_mat[,j]*event_vec*log(lambda)+latentZ_mat[,j]*event_vec*log(beta)+latentZ_mat[,j]*(beta-1)*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*time_vec^beta+latentZ_mat[,j]*log(pi_vec[j]))
}

sumQfunc = function(beta_vec,lambda_vec,latentZ_mat ){
  Qfunc(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1)+Qfunc(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3)
}

hazardrate = function(t,beta,lambda){
  beta*lambda *t^(beta-1)
}

weibull_func = function(t,beta,lambda){
  lambda*beta*t^(beta-1)*exp(-lambda*t^beta)
}

diffB = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*event_vec/beta + latentZ_mat[,j]*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*(time_vec^beta)*log(time_vec))
}

diffL = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*(event_vec/lambda - time_vec^beta))
}

diff_vec = function(beta,lambda,latentZ_mat,j){
  matrix(c(diffB(beta[j],lambda[j],latentZ_mat,j),diffL(beta[j],lambda[j],latentZ_mat,j)),2,1)
}

diffB2 = function(beta,lambda,latentZ_mat,j){
  sum(-latentZ_mat[,j]*event_vec/beta^2 -latentZ_mat[,j]*lambda*(time_vec^beta)*(log(time_vec))^2)
}


HessianQB2 = function(beta,lambda,latentZ_mat,j){
  -sum(latentZ_mat[,j]*event_vec )/(beta^2)-sum(latentZ_mat[,j]*time_vec^beta*(log(time_vec))^2)*lambda
}

HessianQL2 = function(beta,lambda,latentZ_mat,j){
  -1/(lambda^2) * sum(latentZ_mat[,j]*event_vec )
}

HessianQBL = function(beta,lambda,latentZ_mat,j){
  - sum(latentZ_mat[,j]* time_vec^beta *log(time_vec) )
}

HessianMat = function(beta,lambda , latentZ_mat,l){
  matrix(c(HessianQB2(beta[l],lambda[l] , latentZ_mat, j=l),
           HessianQBL(beta[l],lambda[l] , latentZ_mat, j=l),
           HessianQBL(beta[l],lambda[l] , latentZ_mat, j=l),
           HessianQL2(beta[l],lambda[l] , latentZ_mat, j=l)
  ),2,2)
}

DecisionBoundary = function(t,beta_vec,lambda_vec,j=1){
  (pi_vec[j]/pi_vec[2])*(beta_vec[j]/beta_vec[2])*(lambda_vec[j]/lambda_vec[2])*t^(beta_vec[j]-1)*exp(-lambda_vec[j]*t^{beta_vec[j]}+lambda_vec[2]*t)
}



# 
Maximize_theta2 = function(beta=1,lambda=1,latentZ,j=2){
  new_lambda = sum(latentZ[,j]*event_vec)/sum(latentZ[,j]*time_vec)
  return(c(beta,new_lambda))
}


Maximize_BarrierMethod_theta1 = function(beta,lambda,latentZ,bp=1,j=1){
  
  # Old
  theta = matrix(c(beta,lambda),2,1)
  Lfuncion_Value = bp*Qfunc(beta,lambda,latentZ,j)-log(beta)-log(1-beta)-log(lambda)
  
  # Diff vec
  temp_diff_vec = c(bp*diffB(beta,lambda,latentZ_mat,j)+(2*beta-1)/(beta*(1-beta)),
                    bp*diffL(beta,lambda,latentZ_mat,j)-1/(lambda))
  # Diff Hessian
  temp_B2 = bp*HessianQB2(beta,lambda,latentZ_mat,j)+1/(beta^2)+1/(1-beta)^2
  temp_L2 = bp*HessianQL2(beta,lambda,latentZ_mat,j)+1/lambda^2
  temp_BL = bp*HessianQBL(beta,lambda,latentZ_mat,j)
  temp_Hessian = c(temp_B2,temp_BL,temp_BL,temp_L2)
  
  diff_vec = matrix(temp_diff_vec,2,1)
  Hessian_mat = matrix(temp_Hessian,2,2)
  
  # Update theta
  newtheta = theta - solve(Hessian_mat)%*%diff_vec
  return(newtheta)
}

Maximize_BarrierMethod_theta3 = function(beta,lambda,latentZ,bp=1,j=3){
  
  # Old
  theta = matrix(c(beta,lambda),2,1)
  Lfuncion_Value = bp*Qfunc(beta,lambda,latentZ,j)-log(beta-1)-log(lambda)
  
  # Diff vec
  temp_diff_vec = c(bp*diffB(beta,lambda,latentZ_mat,j)-1/(beta-1),
                    bp*diffL(beta,lambda,latentZ_mat,j)-1/(lambda))
  # Diff Hessian
  temp_B2 = bp*HessianQB2(beta,lambda,latentZ_mat,j)+1/(beta-1)^2
  temp_L2 = bp*HessianQL2(beta,lambda,latentZ_mat,j)+1/lambda^2
  temp_BL = bp*HessianQBL(beta,lambda,latentZ_mat,j)
  temp_Hessian = c(temp_B2,temp_BL,temp_BL,temp_L2)
  
  diff_vec = matrix(temp_diff_vec,2,1)
  Hessian_mat = matrix(temp_Hessian,2,2)
  
  # Update theta
  newtheta = theta - solve(Hessian_mat)%*%diff_vec
  return(newtheta)
}

scale_to_max <- function(x) {
  return(x / max(x))
}
scale_rows_to_sum1 <- function(mat) {
  return(t(apply(mat, 1, function(x) x / sum(x))))
}

NR_BM_beta1 = function(beta, lambda, latentZ_mat, j,bp){
  
  f1 = diffB2(beta, lambda, latentZ_mat, j)+(1/bp)*(-1/beta^2-1/(1-beta)^2)
  f0 = diffB(beta, lambda, latentZ_mat, j)+(1/bp)*(1/beta-1/(1-beta))
  
  new_beta=beta - f0/f1
  return(new_beta)
}
NR_BM_beta3 = function(beta, lambda, latentZ_mat, j,bp){
  
  f1 = diffB2(beta, lambda, latentZ_mat, j)+(1/bp)*(1/(beta-1))
  f0 = diffB(beta, lambda, latentZ_mat, j)+(1/bp)*(1/(beta-1)^2)
  
  new_beta=beta - f0/f1
  return(new_beta)
}


Qfunc_onlyB = function(beta = 1 ,latentZ_mat, j=1){
  lambda = sum(latentZ_mat[,j]*event_vec)/sum(latentZ_mat[,j]*(time_vec^beta))
  print(lambda)
  sum(latentZ_mat[,j]*event_vec*log(lambda)+latentZ_mat[,j]*event_vec*log(beta)+latentZ_mat[,j]*(beta-1)*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*time_vec^beta+latentZ_mat[,j]*log(pi_vec[j]))
}


############
# How to Identify a Bathtub Hazard Rate
# 107p

# fdata = read.table('electronic_device.txt',header = T)
fdata = read.table('CNC_data.txt',header = T)
fdata = read.table('Aarest_data.txt',header = T)

# # r 비율로 event를 0으로 랜덤하게 변경
# r <- 0.2  # 예시 비율
# 
# # 변경할 인덱스 선택
# change_indices <- sample(1:nrow(fdata), size = floor(r * nrow(fdata)))
# 
# # 선택된 인덱스의 event 값을 0으로 변경
# fdata$event[change_indices] <- 0
# write.table(fdata,"Aarest_data_censored4.txt")



# Data preprocessing
N = nrow(fdata)
k=3 
event_vec = fdata[,2] %>% as.numeric()
time_vec = fdata[,1]%>% as.numeric()
time_vec = time_vec/(max(time_vec)*1.1)
tot=1e-6

# 7개의 열을 가진 빈 data.frame 생성
theta_df <- data.frame(matrix(ncol = 7, nrow = 0))
column_names <- c("beta1", "lambda1", "beta2", "lambda2", "beta3", "lambda3", "sumQfunc")
colnames(theta_df) <- column_names

## initial beta , lambda , pi 
# initial_beta = c(0.5,1,5)
# initial_lambda = c(1.5,0.00003,3)
# initial_pi = c(1,6,1)

initial_beta = c(0.7,1,5)
initial_lambda = c(0.1,2,3)
initial_pi = c(1,1,1)
initial_pi = initial_pi / sum(initial_pi)

## Parameters initialize beta,pi
beta_vec = initial_beta
pi_vec = initial_pi

## Parameter initialize LatantVariable 
latentZ_mat = data.frame(matrix(0,N,k))
phase1_latent = sapply( time_vec, function(i) exp(-i)) %>% scale_to_max
phase2_latent = 1/2
phase3_latent = sapply( time_vec, function(i) exp(i)) %>% scale_to_max
latentZ_mat[,1]=phase1_latent
latentZ_mat[,2]=phase2_latent
latentZ_mat[,3]=phase3_latent

# latentZ_mat[,1]=rep(1,N)
# latentZ_mat[,2]=rep(8,N)
# latentZ_mat[,3]=rep(1,N)
latentZ_mat = scale_rows_to_sum1(latentZ_mat)

## Parameter initialize Lambda 
lambda_vec = initial_lambda
lambda_vec = sapply( 1:k , function(i) sum(latentZ_mat[,i]*event_vec)/sum(latentZ_mat[,i]*(time_vec^beta_vec[i])))

## Parameter theta
theta_vec = lapply(1:3, function(i) matrix(c(beta_vec[i],lambda_vec[i]),2,1))

plot(pi_vec[2]*weibull_func(time_vec, lambda = lambda_vec[2], beta = beta_vec[2]))


bp=1
for( i in 1:10){
  print(i)
  
  #### E-step ####
  # Obtain latentZ (by theta)
  print(beta_vec)
  weibull_pdfs = lapply(1:k, function(i) pi_vec[i]*weibull_func(time_vec, lambda = lambda_vec[i], beta = beta_vec[i]))
  weibull_pdf_sum = Reduce("+", weibull_pdfs)
  latentZ_mat = do.call(cbind, lapply(weibull_pdfs, function(pdf) pdf / weibull_pdf_sum)) %>% round(4)
  ################
  
  #### M-step ####
  pi_vec = colSums(latentZ_mat)/N
  ################
  
  
  # beta1를 최대화할 함수 정의
  objective_function_1 <- function(beta, lambda, latentZ_mat, j,bp) {
    Q_value <- Qfunc(beta, lambda, latentZ_mat, j)
    # 음수로 반환하여 최대화를 위해 minimize 방향으로 조정
    -(Qfunc(beta,lambda,latentZ_mat,j)+(1/bp)*(log(beta)+log(1-beta)))
    
    # return(-(Qfunc(beta,lambda,latentZ_mat,j)-(1/bp)*(log(beta-beta^2)+log(lambda))))
    return(-(
      
      
      Qfunc_onlyB(beta,latentZ_mat,j)+(1/bp)*(log(beta-beta^2)+log(lambda))))
  }
  
  # beta3를 최대화할 함수 정의
  objective_function_3 <- function(beta, lambda, latentZ_mat, j,bp) {
    Q_value <- Qfunc(beta, lambda, latentZ_mat, j)
    # 음수로 반환하여 최대화를 위해 minimize 방향으로 조정
    # return(-(Qfunc(beta,lambda,latentZ_mat,j)-(1/bp)*(log(beta-1)+log(lambda))))
    return(-(Qfunc_onlyB(beta,latentZ_mat,j)+(1/bp)*(log(beta-beta^2)+log(lambda))))
  }
  
  
  old_beta1   = beta_vec[1]
  old_lambda1 = lambda_vec[1]
  old_beta3   = beta_vec[3]
  old_lambda3 = lambda_vec[3]
  
  
  # while (TRUE) {
  # new_lambda1 = sum(latentZ_mat[,1]*event_vec)/sum(latentZ_mat[,1]*(time_vec^old_beta1))
  new_beta1 = optimize(objective_function_1, interval = c(0.001, 0.999),
                       lambda = old_lambda1, latentZ_mat = latentZ_mat, j = 1,bp, maximum = F)$minimum


  # new_lambda3 = sum(latentZ_mat[,3]*event_vec)/sum(latentZ_mat[,3]*(time_vec^old_beta3))
  new_beta3 = optimize(objective_function_3, interval = c(1.001, 99999),
                       lambda = old_lambda3, latentZ_mat = latentZ_mat, j = 3,bp, maximum = F)$minimum

  

  # if (max(abs(old_beta1-new_beta1),abs(old_beta3-new_beta3))<0.000001) break
  # old_beta1=new_beta1
  # old_beta3=new_beta3
  
  # }

  
  # while (TRUE) {
  #   bp=1.01*bp
  #   
  #   new_beta1 = NR_BM_beta1(beta=old_beta1,lambda = old_lambda1, latentZ_mat = latentZ_mat, j=1,bp=bp)
  #   new_beta3 = NR_BM_beta3(beta=old_beta3,lambda = old_lambda3, latentZ_mat = latentZ_mat, j=3,bp=bp)
  # 
  #   
  #   old_lambda1 = sum(latentZ_mat[,1]*event_vec)/sum(latentZ_mat[,1]*(time_vec^new_beta1))
  #   old_lambda3 = sum(latentZ_mat[,3]*event_vec)/sum(latentZ_mat[,3]*(time_vec^new_beta3))
  #   
  #   if (max(abs(old_beta1-new_beta1),abs(old_beta3-new_beta3))<0.001) break
  #   old_beta1=new_beta1
  #   old_beta3=new_beta3
  # }
  
  
  new_lambda1 = sum(latentZ_mat[,1]*event_vec)/sum(latentZ_mat[,1]*(time_vec^new_beta1))
  new_lambda2 = sum(latentZ_mat[,2]*event_vec)/sum(latentZ_mat[,2]*(time_vec^beta_vec[2]))
  new_lambda3 = sum(latentZ_mat[,3]*event_vec)/sum(latentZ_mat[,3]*(time_vec^new_beta3))
 
  # Update parameters
  beta_vec[1] = new_beta1
  lambda_vec[1] = new_lambda1
  beta_vec[2] = 1
  lambda_vec[2] = new_lambda2
  beta_vec[3] = new_beta3
  lambda_vec[3] = new_lambda3
  bp=1.01*bp
  
  # record
  theta_df = rbind(theta_df,c(beta_vec[1],lambda_vec[1],beta_vec[2],lambda_vec[2],beta_vec[3],lambda_vec[3],sumQfunc(beta_vec,lambda_vec,latentZ_mat)))
  colnames(theta_df) <- column_names

}




# Hazard rate 
hv1 = hazardrate(t=unique(time_vec),beta=beta_vec[1],lambda = lambda_vec[1])
hv2 = hazardrate(t=unique(time_vec),beta=beta_vec[2],lambda = lambda_vec[2])
hv3 = hazardrate(t=unique(time_vec),beta=beta_vec[3],lambda = lambda_vec[3])


# 첫 번째 ggplot
plot1 <- ggplot(data=data.frame(time=unique(time_vec),hvalue1=hv1,hvalue2=hv2,hvalue3=hv3)) +
  geom_point(aes(time, hvalue1), color='red') +
  geom_point(aes(time, hvalue2), color='blue')

# 두 번째 ggplot
plot2 <- ggplot(data=data.frame(time=unique(time_vec),hvalue1=hv1,hvalue2=hv2,hvalue3=hv3)) +
  geom_point(aes(time, hvalue2), color='blue') +
  geom_point(aes(time, hvalue3), color='black')

# 두 개의 그림을 결합하여 하나로 표시
combined_plot <- plot1 + plot2

# 결합된 그림을 출력
print(combined_plot)


plot(theta_df[,'sumQfunc'])
plot(theta_df[100:nrow(theta_df),'beta1'])
plot(theta_df[,'beta2'])
plot(theta_df[,'beta3'])

plot(theta_df[,'lambda1'])
plot(theta_df[,'lambda2'])
plot(theta_df[,'lambda3'])

pi_vec

diffB(beta_vec[1],lambda_vec[1],latentZ_mat,j=1)
diffL(beta_vec[1],lambda_vec[1],latentZ_mat,j=1)

diffL(beta_vec[2],lambda_vec[2],latentZ_mat,j=2)

diffB(beta_vec[3],lambda_vec[3],latentZ_mat,j=3)
diffL(beta_vec[3],lambda_vec[3],latentZ_mat,j=3)




ggplot(data = data.frame(time = unique(time_vec), hvalue1 = hv1, hvalue2 = hv2, hvalue3 = hv3)) +
  geom_point(aes(time, hvalue1), color = 'red') +
  geom_line(aes(time, hvalue1), color = 'red') +   # hvalue1에 대해 선 추가
  geom_point(aes(time, hvalue2), color = 'blue') +
  geom_line(aes(time, hvalue2), color = 'blue') +  # hvalue2에 대해 선 추가
  geom_point(aes(time, hvalue3), color = 'black') +
  geom_line(aes(time, hvalue3), color = 'black')   # hvalue3에 대해 선 추가


plot(DecisionBoundary(seq(0.00,0.999,by=0.01),beta_vec,lambda_vec,j=1) %>% log)
plot(DecisionBoundary(seq(0.00,0.999,by=0.01),beta_vec,lambda_vec,j=3) %>% log)











