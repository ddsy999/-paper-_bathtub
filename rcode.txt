
library(dplyr)
library(ggplot2)
library(patchwork)


##### Denote function ####
Qfunc = function(beta = 1 ,lambda,latentZ_mat, j=1){
  sum(latentZ_mat[,j]*event_vec*log(lambda)+latentZ_mat[,j]*event_vec*log(beta)+latentZ_mat[,j]*(beta-1)*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*time_vec^beta+latentZ_mat[,j]*log(pi_vec[j]))
}

sumQfunc = function(beta_vec,lambda_vec,latentZ_mat ){
  Qfunc(beta=beta_vec[1],lambda_vec[1],latentZ_mat,j=1)+Qfunc(beta=beta_vec[2],lambda_vec[2],latentZ_mat,j=2)+Qfunc(beta=beta_vec[3],lambda_vec[3],latentZ_mat,j=3)
}

hazardrate = function(t,beta,lambda){
  beta*lambda *t^(beta-1)
}

weibull_func = function(t,beta,lambda){
  lambda*beta*t^(beta-1)*exp(-lambda*t^beta)
}

diffB = function(beta,lambda,latentZ_mat,j){
  if (beta == 0) beta <- 1e-8  # beta가 0이면 1e-8로 대체
  sum(latentZ_mat[,j]*event_vec/beta + latentZ_mat[,j]*event_vec*log(time_vec)-latentZ_mat[,j]*lambda*time_vec^beta*log(time_vec))
}

diffL = function(beta,lambda,latentZ_mat,j){
  sum(latentZ_mat[,j]*(event_vec/lambda - time_vec^beta))
}

diff_vec = function(beta,lambda,latentZ_mat,j){
  matrix(c(diffB(beta[j],lambda[j],latentZ_mat,j),diffL(beta[j],lambda[j],latentZ_mat,j)),2,1)
}


HessianQB2 = function(beta,lambda,latentZ_mat,j){
  -sum(latentZ_mat[,j]*event_vec )/(beta^2)-sum(latentZ_mat[,j]*time_vec^beta*(log(time_vec))^2)*lambda
}

HessianQL2 = function(beta,lambda,latentZ_mat,j){
  -1/(lambda^2) * sum(latentZ_mat[,j]*event_vec )
}

HessianQBL = function(beta,lambda,latentZ_mat,j){
  - sum(latentZ_mat[,j]* time_vec^beta *log(time_vec) )
}

DecisionBoundary = function(t,beta_vec,lambda_vec,j=1){
  (pi_vec[j]/pi_vec[2])*(beta_vec[j]/beta_vec[2])*(lambda_vec[j]/lambda_vec[2])*t^(beta_vec[j]-1)*exp(-lambda_vec[j]*t^{beta_vec[j]}+lambda_vec[2]*t)
}



# 
Maximize_theta2 = function(beta=1,lambda=1,latentZ,j=2){
  new_lambda = sum(latentZ[,j]*event_vec)/sum(latentZ[,j]*time_vec)
  return(c(beta,new_lambda))
}


Maximize_BarrierMethod_theta1 = function(beta,lambda,latentZ,bp=1,j=1){
  
  # Old
  theta = matrix(c(beta,lambda),2,1)
  Lfuncion_Value = bp*Qfunc(beta,lambda,latentZ,j)-log(beta)-log(1-beta)-log(lambda)
  
  # Diff vec
  temp_diff_vec = c(bp*diffB(beta,lambda,latentZ_mat,j)+(2*beta-1)/(beta*(1-beta)),
                    bp*diffL(beta,lambda,latentZ_mat,j)-1/(lambda))
  # Diff Hessian
  temp_B2 = bp*HessianQB2(beta,lambda,latentZ_mat,j)+1/(beta^2)+1/(1-beta)^2
  temp_L2 = bp*HessianQL2(beta,lambda,latentZ_mat,j)+1/lambda^2
  temp_BL = bp*HessianQBL(beta,lambda,latentZ_mat,j)
  temp_Hessian = c(temp_B2,temp_BL,temp_BL,temp_L2)
  
  diff_vec = matrix(temp_diff_vec,2,1)
  Hessian_mat = matrix(temp_Hessian,2,2)
  
  # Update theta
  newtheta = theta - solve(Hessian_mat)%*%diff_vec
  return(newtheta)
}

Maximize_BarrierMethod_theta3 = function(beta,lambda,latentZ,bp=1,j=3){
  
  # Old
  theta = matrix(c(beta,lambda),2,1)
  Lfuncion_Value = bp*Qfunc(beta,lambda,latentZ,j)-log(beta-1)-log(lambda)
  
  # Diff vec
  temp_diff_vec = c(bp*diffB(beta,lambda,latentZ_mat,j)-1/(beta-1),
                    bp*diffL(beta,lambda,latentZ_mat,j)-1/(lambda))
  # Diff Hessian
  temp_B2 = bp*HessianQB2(beta,lambda,latentZ_mat,j)+1/(beta-1)^2
  temp_L2 = bp*HessianQL2(beta,lambda,latentZ_mat,j)+1/lambda^2
  temp_BL = bp*HessianQBL(beta,lambda,latentZ_mat,j)
  temp_Hessian = c(temp_B2,temp_BL,temp_BL,temp_L2)
  
  diff_vec = matrix(temp_diff_vec,2,1)
  Hessian_mat = matrix(temp_Hessian,2,2)
  
  # Update theta
  newtheta = theta - solve(Hessian_mat)%*%diff_vec
  return(newtheta)
}


############
# How to Identify a Bathtub Hazard Rate
# 107p

fdata = read.table('Aarest_data.txt',header = T)
# fdata = read.table('CNC_data.txt',header = T)

# Data preprocessing
N = nrow(fdata)
k=3 
event_vec = fdata[,2] %>% as.numeric()
time_vec = fdata[,1]%>% as.numeric()
time_vec = time_vec/max(time_vec)
tot=1e-6

## initial beta , lambda , pi 
# initial_beta = c(0.5,1,5)
# initial_lambda = c(1.5,0.00003,3)
# initial_pi = c(1,6,1)

initial_beta = c(0.7,1,5)
initial_lambda = c(0.1,2,3)
initial_pi = c(1,100,1)
initial_pi = initial_pi / sum(initial_pi)



# 7개의 열을 가진 빈 data.frame 생성
theta_df <- data.frame(matrix(ncol = 7, nrow = 0))
column_names <- c("beta1", "lambda1", "beta2", "lambda2", "beta3", "lambda3", "sumQfunc")
colnames(theta_df) <- column_names

## Parameters initialize 
beta_vec = initial_beta
pi_vec = initial_pi
lambda_vec = initial_lambda



for(i in 1:100){

#### E-step ####
# Obtain latentZ (by theta)
weibull_pdfs = lapply(1:k, function(i) pi_vec[i]*weibull_func(time_vec, lambda = lambda_vec[i], beta = beta_vec[i]))
weibull_pdf_sum = Reduce("+", weibull_pdfs)
latentZ_mat = do.call(cbind, lapply(weibull_pdfs, function(pdf) pdf / weibull_pdf_sum))
#####

#### M-step ####
# maximize Q (with constraints) and update theta(beta) #
# Obtain newPi 
pi_vec = colSums(latentZ_mat)/N
# new_theta1 = Maximize_BarrierMethod_theta1(beta_vec[1],lambda_vec[1],latentZ_mat,bp=2,j=1)
# new_theta2 = Maximize_theta2(beta_vec[2],lambda_vec[2],latentZ_mat,j=2)
# new_theta3 = Maximize_BarrierMethod_theta3(beta_vec[3],lambda_vec[3],latentZ_mat,bp=2,j=3)
# 
# beta_vec = c(new_theta1[1],new_theta2[1],new_theta3[1])
# lambda_vec = c(new_theta1[2],new_theta2[2],new_theta3[2])
# 
# beta_vec
# lambda_vec




# uniroot 함수 실행
result_beta1 = uniroot(diffB, interval = c(0, 1) , lambda = lambda_vec[1], latentZ_mat = latentZ_mat, j = 1)
result1_lambda1 = uniroot(diffL, interval = c(1e-8, 10000) , beta = beta_vec[1], latentZ_mat = latentZ_mat, j = 1)

result1_lambda2 = uniroot(diffL, interval = c(1e-8, 10000) , beta = beta_vec[2], latentZ_mat = latentZ_mat, j = 2)

result_beta3 = uniroot(diffB, interval = c(1+1e-8 , 10000) , lambda = lambda_vec[3], latentZ_mat = latentZ_mat, j = 3)
result1_lambda3 = uniroot(diffL, interval = c(1e-8, 10000) , beta = beta_vec[3], latentZ_mat = latentZ_mat, j = 3)

beta_vec[1] = result_beta1$root
beta_vec[2] = 1
beta_vec[3] = result_beta3$root

lambda_vec[1] = sum(latentZ_mat[,1]*event_vec)/sum(latentZ_mat[,1]*(time_vec^beta_vec[2]))
lambda_vec[2] = Maximize_theta2(beta=1 , lambda=1, latentZ_mat,j=2)[2]
lambda_vec[3] = result1_lambda3$root

theta_df = rbind(theta_df,c(beta_vec[1],lambda_vec[1],beta_vec[2],lambda_vec[2],beta_vec[3],lambda_vec[3],sumQfunc(beta_vec,lambda_vec,latentZ_mat)))
colnames(theta_df) <- column_names
}

plot(theta_df[,'sumQfunc'])
plot(theta_df[,'beta1'])
plot(theta_df[,'beta3'])

plot(theta_df[,'lambda1'])
plot(theta_df[,'lambda2'])
plot(theta_df[,'lambda3'])





























